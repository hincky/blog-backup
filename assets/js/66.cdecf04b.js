(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{380:function(a,v,_){"use strict";_.r(v);var t=_(14),r=Object(t.a)({},(function(){var a=this,v=a._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[v("h1",{attrs:{id:"进程与线程的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#进程与线程的区别"}},[a._v("#")]),a._v(" 进程与线程的区别")]),a._v(" "),v("p",[a._v("是否单独占有内存地址空间及其它系统资源（比如I/O）：")]),a._v(" "),v("ul",[v("li",[a._v("进程间存在内存隔离，数据是分开的，数据共享复杂但是同步简单，各个进程之间互不干扰；而线程共享所属进程占有的内存地址空间和资源，数据共享简单，但是同步复杂。")]),a._v(" "),v("li",[a._v("进程单独占有一定的内存地址空间，一个进程出现问题不会影响其他进程，不影响主程序的稳定性，可靠性高；一个线程崩溃可能影响整个程序的稳定性，可靠性较低。")]),a._v(" "),v("li",[a._v("进程单独占有一定的内存地址空间，进程的创建和销毁不仅需要保存寄存器和栈信息，还需要资源的分配回收以及页调度，开销较大；线程只需要保存寄存器和栈信息，开销较小。")])]),a._v(" "),v("p",[v("strong",[a._v("进程是操作系统进行资源分配的基本单位，而线程是操作系统进行调度的基本单位")])]),a._v(" "),v("h2",{attrs:{id:"cpu"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#cpu"}},[a._v("#")]),a._v(" cpu")]),a._v(" "),v("p",[v("strong",[a._v("上下文")]),a._v("：是指某一时间点 CPU 寄存器和程序计数器的内容。")]),a._v(" "),v("ul",[v("li",[a._v("寄存器：是cpu内部的少量的速度很快的闪存，通常存储和访问计算过程的中间值提高计算机程序的运行速度。")]),a._v(" "),v("li",[a._v("程序计数器：是一个专用的寄存器，用于表明指令序列中 CPU 正在执行的位置，存的值为正在执行的指令的位置或者下一个将要被执行的指令的位置，具体实现依赖于特定的系统。")])]),a._v(" "),v("h1",{attrs:{id:"java多线程实现"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java多线程实现"}},[a._v("#")]),a._v(" java多线程实现")]),a._v(" "),v("p",[a._v("无返回值的run()方法")]),a._v(" "),v("ul",[v("li",[a._v("继承Thread类，并重写run方法；")]),a._v(" "),v("li",[a._v("实现Runnable接口的run方法；")])]),a._v(" "),v("p",[a._v("然后new MyThread().start()执行线程")]),a._v(" "),v("p",[a._v("有返回值的run()方法")]),a._v(" "),v("ul",[v("li",[a._v("Callable接口")]),a._v(" "),v("li",[a._v("Future类")]),a._v(" "),v("li",[a._v("FutureTask接口")])]),a._v(" "),v("h2",{attrs:{id:"thread几个常用方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#thread几个常用方法"}},[a._v("#")]),a._v(" Thread几个常用方法")]),a._v(" "),v("ul",[v("li",[a._v("currentThread()：静态方法，返回对当前正在执行的线程对象的引用；")]),a._v(" "),v("li",[a._v("start()：开始执行线程的方法，java虚拟机会调用线程内的run()方法；")]),a._v(" "),v("li",[a._v("yield()：yield在英语里有放弃的意思，同样，这里的yield()指的是当前线程愿意让出对当前处理器的占用。这里需要注意的是，就算当前线程调用了yield()方法，程序在调度的时候，也还有可能继续运行这个线程的；")]),a._v(" "),v("li",[a._v("sleep()：静态方法，使当前线程睡眠一段时间；")]),a._v(" "),v("li",[a._v("join()：使当前线程等待另一个线程执行完毕之后再继续执行，内部调用的是Object类的wait方法实现的；")])]),a._v(" "),v("h2",{attrs:{id:"thread类和runnable接口的比较"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#thread类和runnable接口的比较"}},[a._v("#")]),a._v(" Thread类和Runnable接口的比较")]),a._v(" "),v("ul",[v("li",[a._v("由于Java“单继承，多实现”的特性，Runnable接口使用起来比Thread更灵活。")]),a._v(" "),v("li",[a._v("Runnable接口出现更符合面向对象，将线程单独进行对象的封装。")]),a._v(" "),v("li",[a._v("Runnable接口出现，降低了线程对象和线程任务的耦合性。")]),a._v(" "),v("li",[a._v("如果使用线程时不需要使用Thread类的诸多方法，显然使用Runnable接口更为轻量。")])]),a._v(" "),v("p",[a._v("所以，我们通常优先使用“实现Runnable接口”这种方式来自定义线程类。")])])}),[],!1,null,null,null);v.default=r.exports}}]);