(window.webpackJsonp=window.webpackJsonp||[]).push([[326],{639:function(a,s,t){"use strict";t.r(s);var l=t(14),n=Object(l.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"killall"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#killall"}},[a._v("#")]),a._v(" killall")]),a._v(" "),s("p",[a._v("使用进程的名称来杀死一组进程")]),a._v(" "),s("h2",{attrs:{id:"补充说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#补充说明"}},[a._v("#")]),a._v(" 补充说明")]),a._v(" "),s("p",[s("strong",[a._v("killall命令")]),a._v(" 使用进程的名称来杀死进程，使用此指令可以杀死一组同名进程。我们可以使用kill命令杀死指定进程PID的进程，如果要找到我们需要杀死的进程，我们还需要在之前使用ps等命令再配合grep来查找进程，而killall把这两个过程合二为一，是一个很好用的命令。")]),a._v(" "),s("h3",{attrs:{id:"语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[a._v("#")]),a._v(" 语法")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("killall"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("选项"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("参数"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("h3",{attrs:{id:"选项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#选项"}},[a._v("#")]),a._v(" 选项")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("-e：对长名称进行精确匹配；\n-l：忽略大小写的不同；\n-p：杀死进程所属的进程组；\n-i：交互式杀死进程，杀死进程前需要进行确认；\n-l：打印所有已知信号列表；\n-q：如果没有进程被杀死。则不输出任何信息；\n-r：使用正规表达式匹配要杀死的进程名称；\n-s：用指定的进程号代替默认信号“SIGTERM”；\n-u：杀死指定用户的进程。\n")])])]),s("h3",{attrs:{id:"参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参数"}},[a._v("#")]),a._v(" 参数")]),a._v(" "),s("p",[a._v("进程名称：指定要杀死的进程名称。")]),a._v(" "),s("h3",{attrs:{id:"实例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实例"}},[a._v("#")]),a._v(" 实例")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 杀死所有同名进程")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("killall")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("vi")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 指定向进程发送的信号")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("killall")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-9")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("vi")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 0信号表示不向进程发送信号, 可通过返回值判断进程是否存在, 0(存在)1(不存在)")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("killall")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-0")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("vi")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$?")]),a._v("\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);