(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{399:function(a,t,s){"use strict";s.r(t);var e=s(14),n=Object(e.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"ag"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ag"}},[a._v("#")]),a._v(" ag")]),a._v(" "),t("p",[a._v("ack 的升级版，C语言编写，更快更人性化")]),a._v(" "),t("h2",{attrs:{id:"补充说明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#补充说明"}},[a._v("#")]),a._v(" 补充说明")]),a._v(" "),t("p",[t("strong",[a._v("ag命令")]),a._v(" 它比ack快一个数量级。它会忽略 .gitignore 和 .hgignore 中的文件模式。如果源代码库中有您不想搜索的文件，只需将它们的模式添加到 .ignore 文件即可。命令名称比 ack 短 33%，并且所有键都在 home 行！\n"),t("a",{attrs:{href:"https://github.com/ggreer/the_silver_searcher",target:"_blank",rel:"noopener noreferrer"}},[a._v("Github-参考链接"),t("OutboundLink")],1)]),a._v(" "),t("h3",{attrs:{id:"语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[a._v("#")]),a._v(" 语法")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[a._v("ag "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("options"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" pattern "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("path "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\nag "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("可选项"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" 匹配模式 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("路径"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),t("h3",{attrs:{id:"选项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#选项"}},[a._v("#")]),a._v(" 选项")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[a._v("Output Options:\n     "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--ackmate")]),a._v("            以 AckMate-parseable 的格式显示结果\n  "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-A")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--after")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("LINES")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("      显示匹配行之后的行（默认2行）\n  "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-B")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--before")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("LINES")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("     显示匹配行之前的行（默认2行）\n     --"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("no"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("break          不同文件中匹配到的内容新建一行显示（默认开启）\n  "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-c")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--count")]),a._v("              只显示每个文件中匹配到的数量\n                          "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("This often differs from the number of matching lines"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n     --"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("no"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("color          Print color codes "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("in")]),a._v(" results "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("Enabled by default"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n     --color-line-number  Color codes "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" line numbers "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("Default: "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("33")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n     --color-match        Color codes "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" result match numbers "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("Default: "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("30")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("43")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n     --color-path         Color codes "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" path names "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("Default: "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n     "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--column")]),a._v("             Print "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("column")]),a._v(" numbers "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("in")]),a._v(" results\n     --"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("no"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("filename       Print "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("file")]),a._v(" names "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("Enabled unless searching a single "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("file")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-H")]),a._v(" --"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("no"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("heading        在每个文件匹配前输出文件名（默认开启）\n  "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-C")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--context")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("LINES")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("    显示匹配行上下两行（默认2行）\n     --"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("no"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("group          Same as --"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("no"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("break --"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("no"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("heading\n  "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-g")]),a._v(" --filename-pattern PATTERN\n                          Print filenames matching PATTERN\n  "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-l")]),a._v(" --files-with-matches 显示包含匹配的文件名（不显示匹配的行）\n  "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-L")]),a._v(" --files-without-matches  只显示不包含匹配项的文件名\n     --print-all-files    Print headings "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" all files searched, even those that\n                          don"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("'t contain matches\n     --"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("no"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("numbers        Print line numbers. Default is to omit line numbers\n                          when searching streams\n  "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-o")]),a._v(" --only-matching      只输出每行匹配的部分\n     --print-long-lines   Print matches on very long lines "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("Default: "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("2k characters"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n     "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--passthrough")]),a._v("        When searching a stream, print all lines even "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" they\n                          don"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("'t match\n     "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--silent")]),a._v("             Suppress all log messages, including errors\n     "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--stats")]),a._v("              Print stats "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("files scanned, "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("time")]),a._v(" taken, etc."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n     --stats-only         Print stats and nothing else.\n                          "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("Same as "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--count")]),a._v(" when searching a single "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("file")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n     "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--vimgrep")]),a._v("            Print results like vim"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("'s :vimgrep /pattern/g would\n                          "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("it reports every match on the line"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-0")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--null")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--print0")]),a._v("      Separate filenames with null "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("for "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'xargs -0'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\nSearch Options:\n  "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-a")]),a._v(" --all-types          搜索所有文件（包括隐藏文件）\n  "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-D")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--debug")]),a._v("              Ridiculous debugging "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("probably not useful"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n     "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--depth")]),a._v(" NUM          目录搜索最大深度（默认25）\n  "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-f")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--follow")]),a._v("             跟随链接进行搜索\n  "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-F")]),a._v(" --fixed-strings      Alias "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--literal")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" compatibility with "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("grep")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-G")]),a._v(" --file-search-regex  根据正则匹配搜索指定类型的文件\n     "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--hidden")]),a._v("             Search hidden files "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("obeys .*ignore files"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-i")]),a._v(" --ignore-case        Match "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("case")]),a._v(" insensitively\n     "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--ignore")]),a._v(" PATTERN     Ignore files/directories matching PATTERN\n                          "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("literal file/directory names also allowed"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n     --ignore-dir NAME    Alias "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--ignore")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" compatibility with ack.\n  "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-m")]),a._v(" --max-count NUM      在一个文件中最大匹配的数量"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("默认: "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("10,000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n     --one-device         不跟随其他设备的链接搜索\n  "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-p")]),a._v(" --path-to-ignore STRING\n                          Use .ignore "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("file")]),a._v(" at STRING\n  "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-Q")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--literal")]),a._v("            Don"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("'t parse PATTERN as a regular expression\n  "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-s")]),a._v(" --case-sensitive     Match "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("case")]),a._v(" sensitively\n  "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-S")]),a._v(" --smart-case         Match "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("case")]),a._v(" insensitively unless PATTERN contains\n                          uppercase characters "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("Enabled by default"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n     --search-binary      搜索二进制文件\n  "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-t")]),a._v(" --all-text           搜索所有文本文件（不包括隐藏文件）\n  "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-u")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--unrestricted")]),a._v("       搜索所有文件 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("忽略 .ignore, .gitignore, etc."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n                          搜索二进制和隐藏文件"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-U")]),a._v(" --skip-vcs-ignores   Ignore VCS ignore files\n                          "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v(".gitignore, .hgignore"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" still obey .ignore"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-v")]),a._v(" --invert-match       反向匹配\n  "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-w")]),a._v(" --word-regexp        只匹配整个单词\n  "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-W")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--width")]),a._v(" NUM          Truncate match lines after NUM characters\n  "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-z")]),a._v(" --search-zip         搜索压缩文件中的内容\n\nFile Types:\nThe search can be restricted to certain types of files. Example:\n  ag "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--html")]),a._v(" needle   结果输出到指定类型文件\n  - Searches "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'needle'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("in")]),a._v(" files with suffix .htm, .html, .shtml or .xhtml.\n\nFor a list of supported "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("file")]),a._v(" types run:\n  ag --list-file-types  列出支持的文件类型\n")])])]),t("h3",{attrs:{id:"实例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实例"}},[a._v("#")]),a._v(" 实例")]),a._v(" "),t("p",[a._v("列出当前目录下包含 "),t("code",[a._v("npm")]),a._v(" 的文件")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[a._v("➜  vue-project ag "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("npm")]),a._v(" ./\nREADME.md\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("16")]),a._v(":npm "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("22")]),a._v(":npm run dev\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("28")]),a._v(":npm run build\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);