(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{335:function(t,a,s){"use strict";s.r(a);var e=s(14),r=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"子查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#子查询"}},[t._v("#")]),t._v(" 子查询")]),t._v(" "),a("ul",[a("li",[t._v("关联子查询：主句查询条件和从句查询条件进行了关联，外部执行一次里面就执行一次")]),t._v(" "),a("li",[t._v("非关联子查询：从句计算的结果是固定的，外部查询依赖里面查询的结果")]),t._v(" "),a("li",[t._v("集合比较子查询")])]),t._v(" "),a("h2",{attrs:{id:"关联子查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关联子查询"}},[t._v("#")]),t._v(" 关联子查询")]),t._v(" "),a("p",[t._v("对于外部查询返回的每一行数据，内部查询都要执行一次。另外，在关联子查询中是信息流是双向的。外部查询的每行数据传递一个值给子查询，然后子查询为每一行数据执行一次并返回它的记录。然后，外部查询根据返回的记录做出决策。")]),t._v(" "),a("p",[t._v("一般搭配：")]),t._v(" "),a("ol",[a("li",[t._v("从句里面一般都有类似 "),a("strong",[a("code",[t._v("WHERE a.team_id = b.team_id")])]),t._v(" 的语法")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" player_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" height"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" team_id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" player "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" height "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("avg")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("height"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" player "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("team_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("team_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("和 "),a("strong",[a("code",[t._v("EXISTS/NOT EXISTS")])]),t._v(" 一起来使用")])]),t._v(" "),a("p",[t._v("EXISTS 子查询用来判断条件是否满足，满足的话为 True，不满足为 False。")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" player_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" team_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" player_name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" player "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("EXISTS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" player_id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" player_score "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" player"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("player_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" player_score"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("player_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"非关联子查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#非关联子查询"}},[t._v("#")]),t._v(" 非关联子查询")]),t._v(" "),a("ol",[a("li",[t._v("先执行内层查询")]),t._v(" "),a("li",[t._v("再执行外层查询")])]),t._v(" "),a("p",[t._v("外层查询依赖内层的查询结果")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" player_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" height "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" player "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" height "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("max")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("height"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" player"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"集合比较子查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集合比较子查询"}},[t._v("#")]),t._v(" 集合比较子查询")]),t._v(" "),a("p",[a("code",[t._v("ANY")]),t._v("、"),a("code",[t._v("ALL")]),t._v(" "),a("strong",[t._v("关键字必须与一个比较操作符一起使用")])]),t._v(" "),a("blockquote",[a("p",[t._v("因为如果你不使用比较操作符，就起不到集合比较的作用，那么使用 ANY 和 ALL 就没有任何意义。")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("比较类型")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("作用")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("例句")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("IN")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("判断是否在集合中")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("SELECT player_id, team_id, player_name FROM player WHERE player_id "),a("strong",[t._v("in")]),t._v(" (SELECT player_id FROM player_score WHERE player.player_id = player_score.player_id)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("ANY")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("与子查询返回的任何值比较")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("SELECT player_id, player_name, height FROM player WHERE height > ANY (SELECT height FROM player WHERE team_id = 1002)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("ALL")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("与子查询返回的所有值比较")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("SELECT player_id, player_name, height FROM player WHERE height > ALL (SELECT height FROM player WHERE team_id = 1002)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("SOME")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("与ANY作用相同，一般用ANY")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}})])])]),t._v(" "),a("h3",{attrs:{id:"in-和-exists-如何选择"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#in-和-exists-如何选择"}},[t._v("#")]),t._v(" IN 和 EXISTS 如何选择")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" A "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" cc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" cc "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" B"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" A "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" EXIST "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" cc "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" B "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" B"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cc"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("A"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("在这里例子当中，表 A 指的是 player 表，表 B 指的是 player_score 表。")])]),t._v(" "),a("p",[t._v("在对 cc 列建立索引的情况下，我们还需要判断表 A 和表 B 的大小。")]),t._v(" "),a("p",[t._v("如果"),a("strong",[t._v("表 A 比表 B 大")]),t._v("，那么 "),a("code",[t._v("IN")]),t._v(" 子查询的效率要比 "),a("code",[t._v("EXIST")]),t._v(" 子查询效率高，因为这时 B 表中如果对 cc 列进行了索引，那么 IN 子查询的效率就会比较高。")]),t._v(" "),a("p",[t._v("如果"),a("strong",[t._v("表 A 比表 B 小")]),t._v("，那么使用 "),a("code",[t._v("EXISTS")]),t._v(" 子查询效率会更高，因为我们可以使用到 A 表中对 cc 列的索引，而不用从 B 中进行 cc 列的查询。")]),t._v(" "),a("blockquote",[a("p",[t._v("总结")])]),t._v(" "),a("ol",[a("li",[t._v("都是对较小的表进行索引，提高查询效率；")]),t._v(" "),a("li",[t._v("小表在后（内层），用 "),a("code",[t._v("IN")])]),t._v(" "),a("li",[t._v("小表在前（外层），用 "),a("code",[t._v("EXISTS")])])]),t._v(" "),a("p",[t._v("IN表是外边和内表进行hash连接，是先执行子查询。\nEXISTS是对外表进行循环，然后在内表进行查询。\n因此如果外表数据量大，则用IN，如果外表数据量小，也用EXISTS。")]),t._v(" "),a("h3",{attrs:{id:"not-in-和-not-exists-如何选择"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#not-in-和-not-exists-如何选择"}},[t._v("#")]),t._v(" NOT IN 和 NOT EXISTS 如何选择")]),t._v(" "),a("p",[t._v("IN有一个缺陷是不能判断NULL，因此如果字段存在NULL值，则会出现返回，所以最好使用NOT EXISTS。")]),t._v(" "),a("h2",{attrs:{id:"子查询作为计算字段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#子查询作为计算字段"}},[t._v("#")]),t._v(" 子查询作为计算字段")]),t._v(" "),a("p",[t._v("比如想查询每个球队的球员数")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" team_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" player "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" player"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("team_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" team"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("team_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" player_num "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" team\n")])])]),a("p",[t._v("将子查询SELECT count(*) FROM player WHERE player.team_id = team.team_id作为了计算字段")]),t._v(" "),a("p",[t._v("通常我们需要给这个计算字段起一个别名，这里我用的是 player_num，因为子查询的语句比较长，使用别名更容易理解。")])])}),[],!1,null,null,null);a.default=r.exports}}]);