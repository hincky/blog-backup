(window.webpackJsonp=window.webpackJsonp||[]).push([[380],{692:function(a,s,t){"use strict";t.r(s);var e=t(14),r=Object(e.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"make"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#make"}},[a._v("#")]),a._v(" make")]),a._v(" "),s("p",[a._v("GNU的工程化编译工具")]),a._v(" "),s("h2",{attrs:{id:"补充说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#补充说明"}},[a._v("#")]),a._v(" 补充说明")]),a._v(" "),s("p",[s("strong",[a._v("make命令")]),a._v(" 是GNU的工程化编译工具，用于编译众多相互关联的源代码文件，以实现工程化的管理，提高开发效率。")]),a._v(" "),s("h3",{attrs:{id:"语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[a._v("#")]),a._v(" 语法")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("make"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("选项"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("参数"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("h3",{attrs:{id:"选项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#选项"}},[a._v("#")]),a._v(" 选项")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("-f：指定“makefile”文件；\n-i：忽略命令执行返回的出错信息；\n-s：沉默模式，在执行之前不输出相应的命令行信息；\n-r：禁止使用build-in规则；\n-n：非执行模式，输出所有执行命令，但并不执行；\n-t：更新目标文件；\n-q：make操作将根据目标文件是否已经更新返回"),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"0"')]),a._v("或非"),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"0"')]),a._v("的状态信息；\n-p：输出所有宏定义和目标文件描述；\n-d：Debug模式，输出有关文件和检测时间的详细信息。\n")])])]),s("p",[a._v("Linux下常用选项与Unix系统中稍有不同，下面是不同的部分：")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-c")]),a._v(" dir：在读取 makefile 之前改变到指定的目录dir；\n"),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-I")]),a._v(" dir：当包含其他 makefile文件时，利用该选项指定搜索目录；\n-h：help文挡，显示所有的make选项；\n-w：在处理 makefile 之前和之后，都显示工作目录。\n")])])]),s("h3",{attrs:{id:"参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参数"}},[a._v("#")]),a._v(" 参数")]),a._v(" "),s("p",[a._v("目标：指定编译目标。")]),a._v(" "),s("h3",{attrs:{id:"知识扩展"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#知识扩展"}},[a._v("#")]),a._v(" 知识扩展")]),a._v(" "),s("p",[a._v("无论是在linux 还是在Unix环境 中，make都是一个非常重要的编译命令。不管是自己进行项目开发还是安装应用软件，我们都经常要用到make或make install。利用make工具，我们可以将大型的开发项目分解成为多个更易于管理的模块，对于一个包括几百个源文件的应用程序，使用make和 makefile工具就可以简洁明快地理顺各个源文件之间纷繁复杂的相互关系。")]),a._v(" "),s("p",[a._v("而且如此多的源文件，如果每次都要键入gcc命令进行编译的话，那对程序员 来说简直就是一场灾难。而make工具则可自动完成编译工作，并且可以只对程序员在上次编译后修改过的部分进行编译。")]),a._v(" "),s("p",[a._v("因此，有效的利用make和 makefile工具可以大大提高项目开发的效率。同时掌握make和makefile之后，您也不会再面对着Linux下的应用软件手足无措了。")])])}),[],!1,null,null,null);s.default=r.exports}}]);