(window.webpackJsonp=window.webpackJsonp||[]).push([[235],{547:function(s,a,t){"use strict";t.r(a);var e=t(14),n=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"fishshell"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fishshell"}},[s._v("#")]),s._v(" fishshell")]),s._v(" "),a("p",[s._v("比 bash 更好用的 shell")]),s._v(" "),a("h2",{attrs:{id:"安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[s._v("#")]),s._v(" 安装")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Ubuntu 和 Debian 的安装方法。")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt-get")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" fish\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Mac 的安装方法。")]),s._v("\nbrew "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" fish\n")])])]),a("h2",{attrs:{id:"启动与帮助"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#启动与帮助"}},[s._v("#")]),s._v(" 启动与帮助")]),s._v(" "),a("p",[s._v("由于 "),a("code",[s._v("Fish")]),s._v(" 的语法与 "),a("code",[s._v("Bash")]),s._v(" 有很大差异，"),a("code",[s._v("Bash")]),s._v(" 脚本一般不兼容。因此，建议不要将 "),a("code",[s._v("Fish")]),s._v(" 设为默认 "),a("code",[s._v("Shell")]),s._v("，而是每次手动启动它。")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 安装完成后，就可以启动 Fish。")]),s._v("\n$ fish\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用过程中，如果需要帮助，可以输入 help 命令")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("help")]),s._v("\n")])])]),a("h2",{attrs:{id:"彩色显示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#彩色显示"}},[s._v("#")]),s._v(" 彩色显示")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 无效命令为红色")]),s._v("\n$ mkd\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 有效命令为蓝色")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 有效路径会有下划线。如果没有下划线，你就知道这个路径不存在。")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" ~/somefi \n")])])]),a("h2",{attrs:{id:"自动建议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自动建议"}},[s._v("#")]),s._v(" 自动建议")]),s._v(" "),a("p",[s._v("Fish 会自动在光标后面给出建议，表示可能的选项，颜色为灰色。如果采纳建议，可以按下 "),a("code",[s._v("→")]),s._v(" 或 "),a("code",[s._v("Control + F")]),s._v(" 。如果只采纳一部分，可以按下 "),a("code",[s._v("Alt + →")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("$ /bin/hostname "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 命令建议")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" --ignore-case "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 参数建议")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" node_modules "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 路径建议")]),s._v("\n")])])]),a("h2",{attrs:{id:"自动补全"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自动补全"}},[s._v("#")]),s._v(" 自动补全")]),s._v(" "),a("p",[s._v("输入命令时，"),a("code",[s._v("Fish")]),s._v(" 会自动显示匹配的上一条历史记录。如果没有匹配的历史记录，"),a("code",[s._v("Fish")]),s._v(" 会猜测可能的结果，自动补全各种输入。比如，输入 "),a("code",[s._v("pyt")]),s._v(" 再按下 "),a("code",[s._v("Tab")]),s._v(" ，就会自动补全为 "),a("code",[s._v("python")]),s._v(" 命令。")]),s._v(" "),a("p",[a("code",[s._v("Fish")]),s._v(" 还可以自动补全 "),a("code",[s._v("Git")]),s._v(" 分支。")]),s._v(" "),a("h2",{attrs:{id:"脚本语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#脚本语法"}},[s._v("#")]),s._v(" 脚本语法")]),s._v(" "),a("h3",{attrs:{id:"if-语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#if-语句"}},[s._v("#")]),s._v(" if 语句")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" fish /etc/shells\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" Found fish\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v(" /etc/shells\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" Found "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" Got nothing\nend\n")])])]),a("h3",{attrs:{id:"switch-语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#switch-语句"}},[s._v("#")]),s._v(" switch 语句")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("switch "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("uname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" Linux\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" Hi Tux"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" Darwin\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" Hi Hexley"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" FreeBSD NetBSD DragonFly\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" Hi Beastie"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'*'")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" Hi, stranger"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\nend\n")])])]),a("h3",{attrs:{id:"while-循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#while-循环"}},[s._v("#")]),s._v(" while 循环")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Loop forever"')]),s._v("\nend\n")])])]),a("h3",{attrs:{id:"for-循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for-循环"}},[s._v("#")]),s._v(" for 循环")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("file")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" *.txt\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$file")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$file")]),s._v(".bak\nend\n")])])]),a("h3",{attrs:{id:"函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[s._v("#")]),s._v(" 函数")]),s._v(" "),a("p",[a("code",[s._v("Fish")]),s._v(" 的函数用来封装命令，或者为现有的命令起别名。")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" ll\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-lhG")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$argv")]),s._v("\nend\n")])])]),a("p",[s._v("上面代码定义了一个 "),a("code",[s._v("ll")]),s._v(" 函数。命令行执行这个函数以后，就可以用 "),a("code",[s._v("ll")]),s._v(" 命令替代 "),a("code",[s._v("ls -lhG")]),s._v("。其中，变量 "),a("code",[s._v("$argv")]),s._v(" 表示函数的参数。")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("command")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-hG")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$argv")]),s._v("\nend\n")])])]),a("p",[s._v("上面的代码重新定义 "),a("code",[s._v("ls")]),s._v(" 命令。注意，函数体内的 "),a("code",[s._v("ls")]),s._v(" 之前，要加上 "),a("code",[s._v("command")]),s._v("，否则会因为无限循环而报错。")]),s._v(" "),a("h3",{attrs:{id:"提示符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#提示符"}},[s._v("#")]),s._v(" 提示符")]),s._v(" "),a("p",[a("code",[s._v("fish_prompt")]),s._v(" 函数用于定义命令行提示符（prompt）。")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" fish_prompt\n  set_color purple\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("date")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"+%m/%d/%y"')]),s._v("\n  set_color FF0\n  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("pwd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'>'")]),s._v("\n  set_color normal\nend\n")])])]),a("p",[s._v("执行上面的函数以后，你的命令行提示符就会变成下面这样。")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("02/06/13\n/home/tutorial > \n")])])]),a("h2",{attrs:{id:"配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[s._v("#")]),s._v(" 配置")]),s._v(" "),a("p",[s._v("Fish 的配置文件是 "),a("code",[s._v("~/.config/fish/config.fish")]),s._v("，每次 "),a("code",[s._v("Fish")]),s._v(" 启动，就会自动加载这个文件。Fish 还提供 Web 界面配置该文件。")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("$ fish_config "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 浏览器打开 Web 界面配置")]),s._v("\n")])])]),a("p",[s._v("Running Commands: 兼容 bash 等shell的命令执行方式"),a("br"),s._v("\nGetting Help: "),a("code",[s._v("help/man cmd -> browser/terminal")]),a("br"),s._v("\nSyntax Highlighting: 实时检查命令是否正确"),a("br"),s._v("\nWildcards: 支持缩写  "),a("code",[s._v("*")]),s._v(" 递归 匹配"),a("br"),s._v("\nPipes and Redirections: 使用 "),a("code",[s._v("^")]),s._v(" 代表 stderr"),a("br"),s._v("\nAutosuggestions: 自动建议, 可以使用 "),a("code",[s._v("Ctrl-f / ->")]),s._v(" 来补全"),a("br"),s._v("\nTab Completions: 更强大的 tab 补全"),a("br"),s._v("\nVariables: 使用 set 设置"),a("br"),s._v("\nExit Status: 使用 "),a("code",[s._v("echo $status")]),s._v(" 替代 "),a("code",[s._v("$?")]),a("br"),s._v("\nExports (Shell Variables)"),a("br"),s._v("\nLists: all variables in fish are really lists"),a("br"),s._v("\nCommand Substitutions: 使用 "),a("code",[s._v("(cmd)")]),s._v(" 来执行命令, 而不是 反引号、"),a("code",[s._v("$()")]),a("br"),s._v("\nCombiners (And, Or, Not): 不支持使用符合来表示逻辑运算"),a("br"),s._v("\nFunctions：使用 "),a("code",[s._v("$argv")]),s._v(" 替代 "),a("code",[s._v("$1")]),a("br"),s._v("\nConditionals (If, Else, Switch) / Functions / Loops: 更人性化的写法(参考 py)"),a("br"),s._v("\nPrompt: "),a("code",[s._v("function fish_prompt")]),s._v(" 实现"),a("br"),s._v("\nStartup (Where's .bashrc?): "),a("code",[s._v("~/.config/fish/config.fish")]),s._v("，更好的方式是 autoloading-function、universal-variables"),a("br"),s._v("\nAutoloading Functions: "),a("code",[s._v("~/.config/fish/functions/.")]),a("br"),s._v("\nUniversal Variables：a variable whose value is shared across all instances of fish")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" name "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'czl'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置变量，替代 name=czl")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$name")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$status")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# exit status，替代 $?")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("env")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 环境变量")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-x")]),s._v(" MyVariable SomeValue "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 替代 export")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-e")]),s._v(" MyVariable\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("PATH")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$PATH")]),s._v(" /usr/local/bin "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用 lists 记录 PATH")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-U")]),s._v(" fish_user_paths /usr/local/bin "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$fish_user_paths")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 永久生效")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("touch")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"testing_"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("date +%s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('".txt"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# command subtitution，替代 `date +%s`")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" file.txt file.txt.bak"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" and "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'back success'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" or "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'back fail'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# combiner")]),s._v("\nfunctions "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 列出 fish 下定义的函数")]),s._v("\n")])])]),a("h2",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[s._v("#")]),s._v(" 参考资料")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://fishshell.com",target:"_blank",rel:"noopener noreferrer"}},[s._v("fish-shell官网"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=n.exports}}]);